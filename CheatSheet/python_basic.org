

* python基础
** 基础语法
*** 字符串
1. 使用r'...'或r'''...'''避免复杂的字符串转义
2. 对于字符集的支持
   - 在字符转前增加u表示输出的字符为utf-8字符
   - 在py文件的头部增加 # -*- coding: utf-8 -*- 能够使python解释器将文件中的字符串按照utf-8处理，这样就不需要在文件中对每个字符串前增加u了
*** 整数和浮点数
对于两个整数的除法运算，如果需要精确输出浮点数，需要将整数末尾增加.0转换为浮点数
*** 布尔类型
在进行布尔运算时需要注意到“短路计算”原则
Python把0、空字符''、和None算作False，其他数值和非空字符串非空字符串算作True.
*** 列表数据类型（list）
列表数据类型是python的内置数据类型
- 列表 :: Python的列表是一种有序的集合，可以随时添加和删除其中的元素
- 输出列表 list_name#
- 列表按照下标访问
  - list_name[n] :: 正序下标访问，n从0开始，取出列表中从头开始取的列表元数
  - list_name[-n] :: 逆序下标访问，取出列表中从尾开始计算的列表元素
- 修改列表
  - append(element) :: 向列表尾部追加
  - insert(n, element) :: 在指定位置插入元素
  - pop(n) :: 删去指定位置的元素
  - list_name[n] = element :: 修改列表中指定的元素
*** 元组数据类型（tuple）
元组数据类型与列表数据类型一样，也是一种有序数据类型，但是tuple在初始化之后不能再进行修改。
~t1~ 展示的是一个常规tuple
~t2~ 展示的是一个只有一个元素的tuple，注意需要创建只有一个元素的tuple时，需要加逗号
~t3~ 展示的是一个tuple中嵌套了一个list，这样就可以对内部的list进行修改了，可以发现tuple只能保证所指向的list对象不发生变化，但是所嵌套list中的内容是可变的。
#+BEGIN_SRC python
t1 = (1 , 2)
t2 = (1 ,)
t3 = ('a', 'b', ['A', 'B'])
t3[2][0] = 'X'
t3[2][1] = 'Y'
#+END_SRC

** 输入和输出
~input()~ 用来捕获用户的键盘输入
~print()~ 用来将内容输出到命令行交互界面

** 格式化字符串
Python格式化字符串与C语言的比较相似，都是使用 ~%~ 占位符的形式
#+BEGIN_SRC python
print('%2d-%02d' % (3, 1))
print('%.2f' % 3.1415926)
#+END_SRC

** 条件判断
python中的条件分支语句示例如下
#+BEGIN_SRC python
if <条件判断1>:
    <执行1>
elif <条件判断2>:
    <执行2>
elif <条件判断3>:
    <执行3>
else:
    <执行4>
#+END_SRC

** 循环语句
*** for循环
for...in循环，依次把list或tuple中的每个元素迭代出来。
示例代码如下
#+BEGIN_SRC python
names = ['Michael', 'Bob', 'Tracy']
for name in names:
    print(name)
#+END_SRC

可以使用range生成整数序列，以下示例代码是计算100内整数的总和。
#+BEGIN_SRC python
sum = 0
for x in range(101):
    sum = sum + x
print(sum)
#+END_SRC

** 函数
*** 使用函数进行数据类型转换
#+BEGIN_SRC python
#将字符串转换为整数
int('123')
#将字符串转换为浮点数
float('12.34')
#将浮点数转化为字符串
str(1.23)
#+END_SRC
*** 定义函数的语法
函数定义示例
#+BEGIN_SRC python
def my_abs(x):
	if x >= 0:
		return x
	else:
		return -x
#+END_SRC

~pass~ 关键字
使用 ~pass~ 关键字定义什么也不做的空函数
#+BEGIN_SRC python
def nop():
	pass
#+END_SRC

使用 ~pass~ 关键字跳过条件分支
#+BEGIN_SRC python
if age > 18:
	pass
#+END_SRC

*** 高级函数特性

** 函数式编程

*** 匿名函数
使用 ~lambda~ 关键字声明匿名函数
~lambda x: x * x~ 实际上定义了形如
#+BEGIN_SRC python
def f(x):
	return x * x
#+END_SRC

*** 装饰器

*** 偏函数

** 模块
在python中一个 ~.py~ 文件就称之为一个模块。
代码模块化的好处是方便复用。

为了防止模块名称重复，可以将模块打包（Package）。比较直观的做法就是创建一个目录将模块存进去，目录的名称就是包名。
需要注意的是，每一个包目录下面都会有一个 ~__init__.py~ 文件，这个文件必须存在，用于提示python将其识别为一个包。

包（Package）支持嵌套结构，即在一个包中嵌套另外一个包。

创建自己的模块时，要注意：
- 模块名称要遵循Python变量名规范，不要使用中文、特殊字符；
- 模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在Python交互环境执行 ~import xxx~, 若成功则说明系统存在此模块。

** 面向对象编程
声明一个类的示例代码如下。
这段代码表示Student继承于object，具有__name和__score两个成员变量，具有name静态成员变量。
通常如果沒有合适的集成类，就使用object类，这是所有类最终都会继承的类。
以双下划线开头的成员变量是私有变量，外部代码不能随意修改。
#+BEGIN_SRC python
class Student(object):
	name='Student'
	def __init__(self, name, score):
		self.__name = name
    self.__score = score
	def print_score(self):
		print('%s: %s' % (self.__name, self.__score))
#+END_SRC

*** 继承和多态
Python作为动态语言，其对于对象类型的检查并不严格。
#+BEGIN_QUOTE
动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。
#+END_QUOTE

*** 获取对象信息
使用 ~type()~ 函数进行对象类型判断。
使用 ~isinstance~ 函数判断某个对象的类型。
使用 ~dir()~ 函数获取一个对象所有属性。


** 面向对象高级编程
   
** 错误、调试和测试
python的调试工具pdb

*** 错误处理
使用 ~try...except...finally~ 
示例代码
#+BEGIN_SRC python
try:
	print('try...')
	r = 10 / 0
	print('result:', r)
except ZeroDivisionError as e:
	print('except:', e)
else:
	print('no error')
finally:
	print('finally...')
print('END')
#+END_SRC

当出现异常情况时会中断 ~try~ 代码段的执行，跳转到 ~except~ 代码段，在没有出现异常时会跳转执行 ~else~ 代码段， ~finally~ 代码段的代码是一直都会执行的。

使用 ~try...except~ 进行异常捕获可以跨多层函数调用。

*** 调用栈
如果错误没有被捕获，它就会一直往上抛，最后被python解释器捕获，打印出错误信息。
注意：在错误信息，靠上的栈更深，更早被调用，靠下的栈更浅，更晚被调用，更接近出异常的代码。

*** 记录错误
python内置的 ~logging~ 模块可以非常容易地记录错误信息，通过配置还可以将错误信息输出到日志文件中。


*** 抛出异常
异常也是class，可以自定义异常类。
只有在必要的时候才定义我们自己的异常类型，如果可以选择python中已有的内置错误类型（比如 ~ValueError~ , ~TypeError~ ），尽量使用python内置的错误类型。








